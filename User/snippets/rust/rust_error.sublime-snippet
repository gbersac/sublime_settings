<snippet>
	<content><![CDATA[
#[derive(Debug)]
pub enum ${1}Error {
	${2},
}

impl Display for ${1}Error
{
	fn fmt(&self, f: &mut Formatter) -> Result<(), Error>
	{
		write!(f, "${3:intro to errors}");
		match *self {
			${1}Error::${2}	=> write!(f, "${4}"),
		};
		Ok(())
	}
}

impl error::Error for ${1}Error {
	fn description(&self) -> &str {
		format!("{}", self)
	}

	fn cause(&self) -> Option<&error::Error> {
		None
	}
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>error</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.rust</scope>
	<description>Error implementation</description>
</snippet>
